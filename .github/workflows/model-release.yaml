name: Model Training and Release
permissions:
  contents: write
  packages: write
  actions: read
on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Prepare test environment
        run: |
          echo "Setting up test environment..."
          
          # Set PYTHONPATH for all commands
          export PYTHONPATH="$PYTHONPATH:$(pwd)/src"
          
          # Create test data
          python scripts/create_test_data.py
          
          # Create symlink for raw_data.tsv that tests expect
          mkdir -p data/raw
          if [ -f data/raw/train_test.tsv ]; then
            cd data/raw
            ln -sf train_test.tsv raw_data.tsv
            cd ../..
          fi
          
          # Verify the file exists
          if [ ! -f data/raw/raw_data.tsv ]; then
            echo "Error: raw_data.tsv not found after symlink creation"
            ls -la data/raw/
            exit 1
          fi
          
          # Preprocess data for tests that need data splits
          echo "Preprocessing data..."
          python src/preprocess.py data/raw/raw_data.tsv
          
          # Verify data splits were created
          if [ ! -f data/splits/X_train.npy ]; then
            echo "Error: Data splits not created"
            ls -la data/splits/ || echo "data/splits directory doesn't exist"
            exit 1
          fi
          
          # Train a model for tests that need it
          echo "Training model for tests..."
          python src/train.py local-dev
          
          # Verify model was created
          if [ ! -f models/sentiment_classifier.joblib ]; then
            echo "Error: Model not created"
            ls -la models/ || echo "models directory doesn't exist"
            exit 1
          fi
          
          # Generate metrics file for tests
          echo "Generating metrics..."
          python src/evaluate.py models/sentiment_classifier.joblib data/splits/X_test.npy data/splits/y_test.npy
          
          # Verify metrics were created
          if [ ! -f metrics/metrics.json ]; then
            echo "Error: Metrics not created"
            ls -la metrics/ || echo "metrics directory doesn't exist"
            exit 1
          fi
          
          echo "Test environment setup completed successfully!"
          echo "Files created:"
          ls -la data/raw/raw_data.tsv
          ls -la data/splits/
          ls -la models/sentiment_classifier.joblib
          ls -la metrics/metrics.json
      
      - name: Run tests
        run: |
          # Ensure src is on PYTHONPATH
          export PYTHONPATH="$PYTHONPATH:$(pwd)/src"
          
          # Also set PYTHONPATH in environment for safety
          echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV
          
          # Verify test files exist before running
          echo "Verifying test files exist..."
          ls -la data/raw/raw_data.tsv || (echo "Missing raw_data.tsv" && exit 1)
          ls -la data/splits/X_train.npy || (echo "Missing X_train.npy" && exit 1)
          ls -la models/sentiment_classifier.joblib || (echo "Missing model" && exit 1)
          ls -la metrics/metrics.json || (echo "Missing metrics" && exit 1)
          
          echo "All test files verified, running tests..."
          pytest tests/ -v

  train-and-release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
    steps:
      - uses: actions/checkout@v4

      - name: Extract version tag
        run: |
          VERSION=${GITHUB_REF:11}
          MAJOR=$(echo "$VERSION" | cut -d . -f 1)
          MINOR=$(echo "$VERSION" | cut -d . -f 2)
          PATCH=$(echo "$VERSION" | cut -d . -f 3)
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV
      
      - name: Verify GH_TOKEN permissions
        run: |
          echo "üîç Checking GH_TOKEN permissions..."
          
          # Test GitHub API access with the token
          if curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/user | grep -q '"login"'; then
            echo "‚úÖ GH_TOKEN is valid and can access GitHub API"
          else
            echo "‚ùå GH_TOKEN authentication failed"
            exit 1
          fi
          
          # Check if token has packages scope by trying to list packages
          echo "Testing packages API access..."
          curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/orgs/${{ github.repository_owner }}/packages?package_type=container" \
               | head -5 || echo "Note: Packages API test completed"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Convert repository owner to lowercase
        id: lowercase
        run: |
          echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Initialize DVC
        run: dvc init --no-scm --force
      - name: Configure DVC Remote Storage
        run: |
          dvc remote add -d storage s3://remla25-team8/dvcstore
      - name: Debug S3 Access
        run: |
          echo "Listing S3 bucket contents:"
          aws s3 ls s3://remla25-team8/dvcstore || echo "Failed to list bucket"
          echo "Checking bucket existence:"
          aws s3api head-bucket --bucket remla25-team8 || echo "Bucket inaccessible"
          echo "Checking specific path:"
          aws s3 ls s3://remla25-team8/dvcstore/files/md5 || echo "Path inaccessible"
      - name: Pull dvc data
        run: |
          # First, try normal pull
          if ! dvc pull --force; then
            echo "DVC pull failed, attempting to reproduce missing data..."
            
            # Check what's missing
            dvc status
            
            # Try to reproduce the pipeline to generate missing files
            dvc repro --force
            
            # Push any newly generated files back to S3
            dvc push
          fi
          
          echo "DVC pull completed, checking data files:"
          ls -l data/raw/raw_data.tsv || echo "Raw data missing"
          ls -l data/splits/ || echo "Split data missing"
      - name: Verify data files
        run: |
          echo "Checking data files:"
          ls -l data/raw/raw_data.tsv || exit 1
          ls -l data/splits/X_train.npy || exit 1
      - name: Train and release model
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Set image name
          IMG="ghcr.io/${{github.repository}}"
          IMG=${IMG@L} # lowercase the image name
          
          # Build the image locally
          docker build -t $IMG:latest .
          
          # Create temporary env file
          echo "HF_TOKEN=${{ secrets.HF_TOKEN }}" > .env
          
          # Run training using the local image
          docker run --rm \
            --env-file .env \
            -v $(pwd)/data:/app/src/data \
            -v $(pwd)/models:/app/src/models \
            $IMG:latest \
            python train.py production --version ${{ env.version }}
          
          # Clean up env file
          rm .env
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug and create package
        run: |
          echo "üîç Debugging Docker authentication and permissions..."
          
          # Check if we're logged in
          echo "Docker info:"
          docker info | grep -E "(Registry|Username)" || true
          
          # Verify the registry URL format
          REPO_LOWER="${{ steps.lowercase.outputs.owner }}/model-training"
          echo "Target repository: ghcr.io/$REPO_LOWER"
          echo "GitHub actor: ${{ github.actor }}"
          
          # Try to create the package using GitHub API if it doesn't exist
          echo "Attempting to create package via GitHub API..."
          
          # Create a minimal package first using docker manifest
          echo "Creating minimal manifest to initialize package..."
          
          # Alternative: try pushing a simple alpine image first to create the package
          echo "Attempting to create package with simple image..."
          docker pull alpine:latest
          docker tag alpine:latest ghcr.io/$REPO_LOWER:init
          
          if docker push ghcr.io/$REPO_LOWER:init; then
            echo "‚úÖ Package created successfully with init tag"
            # Clean up the init tag (optional)
            # We'll leave it for now as it proves the package exists
          else
            echo "‚ùå Failed to create package with init tag"
            echo "This suggests a permissions issue with the GH_TOKEN"
            echo "Please check:"
            echo "1. GH_TOKEN has 'write:packages' scope"
            echo "2. Organization allows package creation"
            echo "3. Token is not expired"
          fi

      - name: Build image locally
        run: |
          REPO_LOWER="${{ steps.lowercase.outputs.owner }}/model-training"
          
          # Build the image locally first
          docker build \
            --build-arg APP_VERSION=${{ env.version }} \
            --build-arg VERSION=${{ github.ref_name }} \
            -t ghcr.io/$REPO_LOWER:${{ env.version }} \
            -t ghcr.io/$REPO_LOWER:latest \
            .
          
          echo "‚úÖ Image built successfully"
          docker images | grep "$REPO_LOWER"

      - name: Push to registry
        run: |
          REPO_LOWER="${{ steps.lowercase.outputs.owner }}/model-training"
          
          echo "üöÄ Pushing images to GitHub Container Registry..."
          
          # First, try to verify we can access the package
          echo "Checking if package exists..."
          if docker pull ghcr.io/$REPO_LOWER:init 2>/dev/null; then
            echo "‚úÖ Package exists and is accessible"
          else
            echo "‚ö†Ô∏è  Package might not exist yet, but continuing..."
          fi
          
          # Push one by one with better error handling and retry logic
          echo "Pushing latest tag..."
          for attempt in 1 2 3; do
            if docker push ghcr.io/$REPO_LOWER:latest; then
              echo "‚úÖ Latest tag pushed successfully on attempt $attempt"
              break
            else
              echo "‚ùå Failed to push latest tag (attempt $attempt/3)"
              if [ $attempt -eq 3 ]; then
                echo "Final attempt failed. Debugging information:"
                echo "Repository: ghcr.io/$REPO_LOWER"
                echo "Tag: latest"
                echo "Please check GitHub Container Registry permissions"
                exit 1
              fi
              sleep 5
            fi
          done
          
          echo "Pushing version tag..."
          if docker push ghcr.io/$REPO_LOWER:${{ env.version }}; then
            echo "‚úÖ Version tag pushed successfully"
          else
            echo "‚ùå Failed to push version tag"
            exit 1
          fi
          
          # Tag and push additional tags
          docker tag ghcr.io/$REPO_LOWER:${{ env.version }} ghcr.io/$REPO_LOWER:${{ env.version_major }}.${{ env.version_minor }}.latest
          docker tag ghcr.io/$REPO_LOWER:${{ env.version }} ghcr.io/$REPO_LOWER:${{ env.version_major }}.latest
          
          docker push ghcr.io/$REPO_LOWER:${{ env.version_major }}.${{ env.version_minor }}.latest
          docker push ghcr.io/$REPO_LOWER:${{ env.version_major }}.latest
          
          echo "üéâ All images pushed successfully!"
    
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GH_TOKEN }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-pre') }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Docker Images

            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version }}`
            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.${{ env.version_minor }}.latest`
            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.latest`
            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:latest`

            ## Usage

            ```bash
            # Pull specific version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version }}
            
            # Pull latest minor version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.${{ env.version_minor }}.latest
            
            # Pull latest major version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.latest
            
            # Pull latest version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:latest
            ```