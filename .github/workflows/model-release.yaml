name: Model Training and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run tests
        run: |
          pip install pytest
          pytest tests/

  train-and-release:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract version tag
        run: |
          VERSION=${GITHUB_REF:11}
          MAJOR=$(echo "$VERSION" | cut -d . -f 1)
          MINOR=$(echo "$VERSION" | cut -d . -f 2)
          PATCH=$(echo "$VERSION" | cut -d . -f 3)
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Convert repository owner to lowercase
        id: lowercase
        run: |
          echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      
      - name: Train and release model
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Set image name
          IMG="ghcr.io/${{github.repository}}"
          IMG=${IMG@L} # lowercase the image name
          
          # Build the image locally
          docker build -t $IMG:latest .
          
          # Create temporary env file
          echo "HF_TOKEN=${{ secrets.HF_TOKEN }}" > .env
          
          # Run training using the local image
          docker run --rm \
            --env-file .env \
            $IMG:latest \
            python train.py production --version ${{ env.version }}
          
          # Clean up env file
          rm .env
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:latest
            ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version }}
            ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.${{ env.version_minor }}.latest
            ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.latest
          build-args: |
            APP_VERSION=${{ env.version }}
            VERSION=${{ github.ref_name }}
    
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GH_TOKEN }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-pre') }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Docker Images

            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version }}`
            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.${{ env.version_minor }}.latest`
            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.latest`
            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:latest`

            ## Usage

            ```bash
            # Pull specific version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version }}
            
            # Pull latest minor version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.${{ env.version_minor }}.latest
            
            # Pull latest major version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.latest
            
            # Pull latest version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:latest
            ```