name: Model Training and Release
permissions:
  contents: write
  packages: write
  actions: read
on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Prepare test environment
        run: |
          echo "Setting up test environment..."
          python scripts/create_test_data.py
          
          # Create symlink for raw_data.tsv that tests expect
          mkdir -p data/raw
          if [ -f data/raw/train_test.tsv ]; then
            ln -sf train_test.tsv data/raw/raw_data.tsv
          fi
          
          # Preprocess data for tests that need data splits
          if [ -f data/raw/raw_data.tsv ]; then
            python src/preprocess.py data/raw/raw_data.tsv
          fi
          
          # Train a model for tests that need it
          if [ -d data/splits ]; then
            python src/train.py local-dev
            # Generate metrics file for tests
            python src/evaluate.py models/sentiment_classifier.joblib data/splits/X_test.npy data/splits/y_test.npy
          fi
      
      - name: Run tests
        run: |
          # Ensure src is on PYTHONPATH
          export PYTHONPATH="$PYTHONPATH:$(pwd)/src"
          
          # Also set PYTHONPATH in environment for safety
          echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV
          
          pytest tests/ -v

  train-and-release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
    steps:
      - uses: actions/checkout@v4

      - name: Extract version tag
        run: |
          VERSION=${GITHUB_REF:11}
          MAJOR=$(echo "$VERSION" | cut -d . -f 1)
          MINOR=$(echo "$VERSION" | cut -d . -f 2)
          PATCH=$(echo "$VERSION" | cut -d . -f 3)
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Convert repository owner to lowercase
        id: lowercase
        run: |
          echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Initialize DVC
        run: dvc init --no-scm --force
      - name: Configure DVC Remote Storage
        run: |
          dvc remote add -d storage s3://remla25-team8/dvcstore
      - name: Debug S3 Access
        run: |
          echo "Listing S3 bucket contents:"
          aws s3 ls s3://remla25-team8/dvcstore || echo "Failed to list bucket"
          echo "Checking bucket existence:"
          aws s3api head-bucket --bucket remla25-team8 || echo "Bucket inaccessible"
          echo "Checking specific path:"
          aws s3 ls s3://remla25-team8/dvcstore/files/md5 || echo "Path inaccessible"
      - name: Pull dvc data
        run: |
          # First, try normal pull
          if ! dvc pull --force; then
            echo "DVC pull failed, attempting to reproduce missing data..."
            
            # Check what's missing
            dvc status
            
            # Try to reproduce the pipeline to generate missing files
            dvc repro --force
            
            # Push any newly generated files back to S3
            dvc push
          fi
          
          echo "DVC pull completed, checking data files:"
          ls -l data/raw/raw_data.tsv || echo "Raw data missing"
          ls -l data/splits/ || echo "Split data missing"
      - name: Verify data files
        run: |
          echo "Checking data files:"
          ls -l data/raw/raw_data.tsv || exit 1
          ls -l data/splits/X_train.npy || exit 1
      - name: Train and release model
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Set image name
          IMG="ghcr.io/${{github.repository}}"
          IMG=${IMG@L} # lowercase the image name
          
          # Build the image locally
          docker build -t $IMG:latest .
          
          # Create temporary env file
          echo "HF_TOKEN=${{ secrets.HF_TOKEN }}" > .env
          
          # Run training using the local image
          docker run --rm \
            --env-file .env \
            -v $(pwd)/data:/app/src/data \
            -v $(pwd)/models:/app/src/models \
            $IMG:latest \
            python train.py production --version ${{ env.version }}
          
          # Clean up env file
          rm .env
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:latest
            ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version }}
            ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.${{ env.version_minor }}.latest
            ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.latest
          build-args: |
            APP_VERSION=${{ env.version }}
            VERSION=${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
    
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GH_TOKEN }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-pre') }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Docker Images

            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version }}`
            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.${{ env.version_minor }}.latest`
            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.latest`
            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:latest`

            ## Usage

            ```bash
            # Pull specific version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version }}
            
            # Pull latest minor version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.${{ env.version_minor }}.latest
            
            # Pull latest major version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:${{ env.version_major }}.latest
            
            # Pull latest version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-training:latest
            ```